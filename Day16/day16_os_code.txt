#include<stdio.h>
#include<stdlib.h>	//for exit
#include<unistd.h>	// for fork(),sleep()

int main(){
	printf("Program started.\n");
	
	printf("Sleeping for 3 second...\n");
	sleep(3);  // pause for 3 second
	
	printf("Exiting the program.\n");
	exit(0); // clean exit
}
//Output:: 
Program started.
Sleeping for 3 second...
Exiting the program.


//
#include<stdio.h>
#include<stdlib.h>	//for exit
#include<unistd.h>	// for fork(),sleep()
#include<sys/wait.h>	//for wait()

int main(){
	
	pid_t pid;			//pid_t is a data type used for process IDs in C programming
	
	printf("Parent process started. PID: %d\n ", getpid());
	pid=fork();	//create  a new child process
	
	if(pid <0 )
	{
		perror("fork failed");
		exit(1);
	}
	if(pid==0){
		//Child process
		printf("Child process. PID: %d, sleeping for 2 seconds...\n",getpid());
		sleep(2);
		printf("Child process exiting. \n");
		exit(0);	//child exits with status 0
	}
	else{
		//parent process
		int status;
		printf("Parent wating for child to finish...\n");
		wait(&status);
		if(WIFEXITED(status)){
			printf("Child exited with status: %d\n",WIFEXITED(status));
		}else{
			printf("Child did not exit normally.\n");
			
		}
		printf("Parent process ending. \n");
	}
	
	return 0;
	 
}
//output::
Parent process started. PID: 10748
Parent wating for child to finish...
Child process. PID: 10749, sleeping for 2 seconds...
Child process exiting.
Child exited with status: 1
Parent process ending.


/// Exercise01 :
// First child :slept for 1 second
// second child: slept for 3 second
// Parent:Both children have finished
#include<stdio.h>
#include<stdlib.h>	//for exit
#include<unistd.h>	// for fork(),sleep()
#include<sys/wait.h>	//for wait()

int main(){
	
	pid_t pid;			 
	
	printf("Parent process started. PID: %d\n ", getpid());
	pid=fork();	//create  a new child process
	pid1=fork();
	
	if(pid <0 )
	{
		perror("fork failed");
		exit(1);
	}
	if(pid==0){
		//First Child process
		printf("First Child process. PID: %d, sleeping for 1 seconds...\n",getpid());
		sleep(1);
		printf("Child process exiting. \n");
		exit(0);	//child exits with status 0
	}
	if(pid1==0){
		//Second Child process
		printf("second Child process.PID:%d, sleeping for 3 seconds...\n ");
		sleep(3);
		
	}
	else{
		
	}
	
	return 0;
	 
}




//Exercise02:
//First Child: sleep for 2 seconds, exit with status 2.
//Second chid: sleep for 1 seconds, exits with status 1.
//parent: waits twice, and prints which child (by PID or exit code)
//finished first and second.

//Exercise03:
// The parent creates a child process.
//The child creates a grandchild process
// The grandchild sleep 2 seconds and exits with status.
//The child waits for the grandchild, prints its exit status.then exit with status 55.